#+TITLE: MidiIn


* MidiIn

An abstraction layer built on [[https://github.com/bwanab/ex-portmidi][ex_portmidi]].

* Installation

Clone the repository for now.

* Usage

This is built at present to serve midi for Modsynth which is a supercollider client, so [[https://supercollider.github.io/][supercollider]] is needed. It should work for other sound generators, but hasn't been tested.

Assuming you've got supercollider installed and running, for this demo, you'll need the [[https://github.com/bwanab/sc_em][Sc_Em project]].

Assuming you've got both supercollider and sc_em, let's assume you've created the following SynthDef on supercollider:

#+NAME: supercollider SynthDef
#+BEGIN_SRC supercollider
(
SynthDef("mySine2", {arg note = 50, amp = 0.1;
	var snd = SinOsc.ar(midicps(note), 0);
	Out.ar(0, snd * amp)}).add;
)
#+END_SRC

The following will allow you to play it:

#+NAME: supercollider SynthDef
#+BEGIN_SRC elixir

id = ScClient.make_module("mySine2", ["amp", 0.2, "note, 55"])
{:ok, pid} = MidiInClient.start_midi(id, "note", &ScClient.set_control/3, "AE-30")
MidiInClient.register_cc(2, id, "amp")

# remember to do this when you want to stop:

ScClient.group_free(1) # to free up recources in supercollider
MidiInClient.stop_midi() # to free up the registry in MidiIn.

#+END_SRC

Note that this SynthDef has no envelope. My instrument is a windsynth, so it makes no sense because the envelope is generated by the player's wind pressure.
